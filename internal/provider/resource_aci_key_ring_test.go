// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccResourcePkiKeyRing(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingMinAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "regenerate", "no"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfigPkiKeyRingMinAllowExisting,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
				),
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingMinAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "regenerate", "no"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "both", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingMin,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingAll,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "completed"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", "-----BEGIN CERTIFICATE-----\nMIICODCCAaGgAwIBAgIJAIt8XMntue0VMA0GCSqGSIb3DQEBCwUAMDQxDjAMBgNV\nBAMMBUFkbWluMRUwEwYDVQQKDAxZb3VyIENvbXBhbnkxCzAJBgNVBAYTAlVTMCAX\nDTE4MDEwOTAwNTk0NFoYDzIxMTcxMjE2MDA1OTQ0WjA0MQ4wDAYDVQQDDAVBZG1p\nbjEVMBMGA1UECgwMWW91ciBDb21wYW55MQswCQYDVQQGEwJVUzCBnzANBgkqhkiG\n9w0BAQEFAAOBjQAwgYkCgYEAohG/7axtt7CbSaMP7r+2mhTKbNgh0Ww36C7Ta14i\nv+VmLyKkQHnXinKGhp6uy3Nug+15a+eIu7CrgpBVMQeCiWfsnwRocKcQJWIYDrWl\nXHxGQn31yYKR6mylE7Dcj3rMFybnyhezr5D8GcP85YRPmwG9H2hO/0Y1FUnWu9Iw\nAQkCAwEAAaNQME4wHQYDVR0OBBYEFD0jLXfpkrU/ChzRvfruRs/fy1VXMB8GA1Ud\nIwQYMBaAFD0jLXfpkrU/ChzRvfruRs/fy1VXMAwGA1UdEwQFMAMBAf8wDQYJKoZI\nhvcNAQELBQADgYEAOmvre+5tgZ0+F3DgsfxNQqLTrGiBgGCIymPkP/cBXXkNuJyl\n3ac7tArHQc7WEA4U2R2rZbEq8FC3UJJm4nUVtCPvEh3G9OhN2xwYev79yt6pIn/l\nKU0Td2OpVyo0eLqjoX5u2G90IBWzhyjFbo+CcKMrSVKj1YOdG0E3OuiJf00=\n-----END CERTIFICATE-----"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", "description"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod1024"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", "name_alias"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", "owner_key"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", "owner_tag"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigPkiKeyRingMin,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigPkiKeyRingReset,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Import testing
			{
				ResourceName:            "aci_key_ring.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"key", "parent_dn"},
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Update with children
			{
				Config:             testConfigPkiKeyRingChildren,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.value", "value_2"),
				),
			},
			// Import testing with children
			{
				ResourceName:            "aci_key_ring.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"key", "parent_dn"},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.value", "value_2"),
				),
			},
			// Update with children removed from config
			{
				Config:             testConfigPkiKeyRingChildrenRemoveFromConfig,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigPkiKeyRingChildrenRemoveOne,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigPkiKeyRingChildrenRemoveAll,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.#", "0"),
				),
			},
		},
		CheckDestroy: resource.ComposeAggregateTestCheckFunc(
			waitForApicBeforeRefresh,
			testCheckResourceDestroy,
		),
	})
}
func TestAccResourcePkiKeyRingWithFvTenant(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "cloud", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingMinDependencyWithFvTenantAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "regenerate", "no"),
				),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "false")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "cloud", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config: testConfigPkiKeyRingMinDependencyWithFvTenantAllowExisting,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
				),
				ExpectError: regexp.MustCompile("Object Already Exists"),
			},
		},
	})

	setEnvVariable(t, "ACI_ALLOW_EXISTING_ON_CREATE", "true")
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "cloud", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingMinDependencyWithFvTenantAllowExisting,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test_2", "regenerate", "no"),
				),
			},
		},
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "cloud", "6.0(2h)") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create with minimum config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingMinDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Update with all config and verify default APIC values
			{
				Config:             testConfigPkiKeyRingAllDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "completed"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "annotation"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", "-----BEGIN CERTIFICATE-----\nMIICODCCAaGgAwIBAgIJAIt8XMntue0VMA0GCSqGSIb3DQEBCwUAMDQxDjAMBgNV\nBAMMBUFkbWluMRUwEwYDVQQKDAxZb3VyIENvbXBhbnkxCzAJBgNVBAYTAlVTMCAX\nDTE4MDEwOTAwNTk0NFoYDzIxMTcxMjE2MDA1OTQ0WjA0MQ4wDAYDVQQDDAVBZG1p\nbjEVMBMGA1UECgwMWW91ciBDb21wYW55MQswCQYDVQQGEwJVUzCBnzANBgkqhkiG\n9w0BAQEFAAOBjQAwgYkCgYEAohG/7axtt7CbSaMP7r+2mhTKbNgh0Ww36C7Ta14i\nv+VmLyKkQHnXinKGhp6uy3Nug+15a+eIu7CrgpBVMQeCiWfsnwRocKcQJWIYDrWl\nXHxGQn31yYKR6mylE7Dcj3rMFybnyhezr5D8GcP85YRPmwG9H2hO/0Y1FUnWu9Iw\nAQkCAwEAAaNQME4wHQYDVR0OBBYEFD0jLXfpkrU/ChzRvfruRs/fy1VXMB8GA1Ud\nIwQYMBaAFD0jLXfpkrU/ChzRvfruRs/fy1VXMAwGA1UdEwQFMAMBAf8wDQYJKoZI\nhvcNAQELBQADgYEAOmvre+5tgZ0+F3DgsfxNQqLTrGiBgGCIymPkP/cBXXkNuJyl\n3ac7tArHQc7WEA4U2R2rZbEq8FC3UJJm4nUVtCPvEh3G9OhN2xwYev79yt6pIn/l\nKU0Td2OpVyo0eLqjoX5u2G90IBWzhyjFbo+CcKMrSVKj1YOdG0E3OuiJf00=\n-----END CERTIFICATE-----"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", "description"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod1024"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", "name_alias"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", "owner_key"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", "owner_tag"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Update with minimum config and verify config is unchanged
			{
				Config:             testConfigPkiKeyRingMinDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
				),
			},
			// Update with empty strings config or default value
			{
				Config:             testConfigPkiKeyRingResetDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Import testing
			{
				ResourceName:            "aci_key_ring.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"key", "parent_dn"},
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
				),
			},
			// Update with children
			{
				Config:             testConfigPkiKeyRingChildrenDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.value", "value_2"),
				),
			},
			// Import testing with children
			{
				ResourceName:            "aci_key_ring.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"key", "parent_dn"},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("aci_key_ring.test", "name", "test_name"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "admin_state", "started"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotation", "orchestrator:terraform"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "certificate_authority", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "description", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "elliptic_curve", "none"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "key_type", "RSA"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "modulus", "mod2048"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "name_alias", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_key", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "owner_tag", ""),
					resource.TestCheckResourceAttr("aci_key_ring.test", "regenerate", "no"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.value", "value_2"),
				),
			},
			// Update with children removed from config
			{
				Config:             testConfigPkiKeyRingChildrenRemoveFromConfigDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.#", "2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.1.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.#", "2"),
				),
			},
			// Update with children first child removed
			{
				Config:             testConfigPkiKeyRingChildrenRemoveOneDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.#", "1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.key", "key_1"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.0.value", "value_2"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.#", "1"),
				),
			},
			// Update with all children removed
			{
				Config:             testConfigPkiKeyRingChildrenRemoveAllDependencyWithFvTenant,
				ExpectNonEmptyPlan: false,
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
					resource.TestCheckResourceAttr("aci_key_ring.test", "annotations.#", "0"),
					resource.TestCheckResourceAttr("aci_key_ring.test", "tags.#", "0"),
				),
			},
		},
		CheckDestroy: resource.ComposeAggregateTestCheckFunc(
			waitForApicBeforeRefresh,
			testCheckResourceDestroy,
		),
	})
}

const testDependencyConfigPkiKeyRing = `
resource "aci_certificate_authority" "test_0" {
  certificate_chain = "-----BEGIN CERTIFICATE-----\nMIICODCCAaGgAwIBAgIJAIt8XMntue0VMA0GCSqGSIb3DQEBCwUAMDQxDjAMBgNV\nBAMMBUFkbWluMRUwEwYDVQQKDAxZb3VyIENvbXBhbnkxCzAJBgNVBAYTAlVTMCAX\nDTE4MDEwOTAwNTk0NFoYDzIxMTcxMjE2MDA1OTQ0WjA0MQ4wDAYDVQQDDAVBZG1p\nbjEVMBMGA1UECgwMWW91ciBDb21wYW55MQswCQYDVQQGEwJVUzCBnzANBgkqhkiG\n9w0BAQEFAAOBjQAwgYkCgYEAohG/7axtt7CbSaMP7r+2mhTKbNgh0Ww36C7Ta14i\nv+VmLyKkQHnXinKGhp6uy3Nug+15a+eIu7CrgpBVMQeCiWfsnwRocKcQJWIYDrWl\nXHxGQn31yYKR6mylE7Dcj3rMFybnyhezr5D8GcP85YRPmwG9H2hO/0Y1FUnWu9Iw\nAQkCAwEAAaNQME4wHQYDVR0OBBYEFD0jLXfpkrU/ChzRvfruRs/fy1VXMB8GA1Ud\nIwQYMBaAFD0jLXfpkrU/ChzRvfruRs/fy1VXMAwGA1UdEwQFMAMBAf8wDQYJKoZI\nhvcNAQELBQADgYEAOmvre+5tgZ0+F3DgsfxNQqLTrGiBgGCIymPkP/cBXXkNuJyl\n3ac7tArHQc7WEA4U2R2rZbEq8FC3UJJm4nUVtCPvEh3G9OhN2xwYev79yt6pIn/l\nKU0Td2OpVyo0eLqjoX5u2G90IBWzhyjFbo+CcKMrSVKj1YOdG0E3OuiJf00=\n-----END CERTIFICATE-----"
  name = "test_name"
}
`

const testConfigPkiKeyRingMinAllowExisting = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
}
resource "aci_key_ring" "test_2" {
  name = "test_name"
  depends_on = [aci_key_ring.test]
}
`

const testConfigPkiKeyRingMin = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
}
`

const testConfigPkiKeyRingAll = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
  admin_state = "completed"
  annotation = "annotation"
  certificate = "-----BEGIN CERTIFICATE-----\nMIICODCCAaGgAwIBAgIJAIt8XMntue0VMA0GCSqGSIb3DQEBCwUAMDQxDjAMBgNV\nBAMMBUFkbWluMRUwEwYDVQQKDAxZb3VyIENvbXBhbnkxCzAJBgNVBAYTAlVTMCAX\nDTE4MDEwOTAwNTk0NFoYDzIxMTcxMjE2MDA1OTQ0WjA0MQ4wDAYDVQQDDAVBZG1p\nbjEVMBMGA1UECgwMWW91ciBDb21wYW55MQswCQYDVQQGEwJVUzCBnzANBgkqhkiG\n9w0BAQEFAAOBjQAwgYkCgYEAohG/7axtt7CbSaMP7r+2mhTKbNgh0Ww36C7Ta14i\nv+VmLyKkQHnXinKGhp6uy3Nug+15a+eIu7CrgpBVMQeCiWfsnwRocKcQJWIYDrWl\nXHxGQn31yYKR6mylE7Dcj3rMFybnyhezr5D8GcP85YRPmwG9H2hO/0Y1FUnWu9Iw\nAQkCAwEAAaNQME4wHQYDVR0OBBYEFD0jLXfpkrU/ChzRvfruRs/fy1VXMB8GA1Ud\nIwQYMBaAFD0jLXfpkrU/ChzRvfruRs/fy1VXMAwGA1UdEwQFMAMBAf8wDQYJKoZI\nhvcNAQELBQADgYEAOmvre+5tgZ0+F3DgsfxNQqLTrGiBgGCIymPkP/cBXXkNuJyl\n3ac7tArHQc7WEA4U2R2rZbEq8FC3UJJm4nUVtCPvEh3G9OhN2xwYev79yt6pIn/l\nKU0Td2OpVyo0eLqjoX5u2G90IBWzhyjFbo+CcKMrSVKj1YOdG0E3OuiJf00=\n-----END CERTIFICATE-----"
  certificate_authority = "test_name"
  description = "description"
  elliptic_curve = "none"
  key = "-----BEGIN PRIVATE KEY-----\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKIRv+2sbbewm0mj\nD+6/tpoUymzYIdFsN+gu02teIr/lZi8ipEB514pyhoaerstzboPteWvniLuwq4KQ\nVTEHgoln7J8EaHCnECViGA61pVx8RkJ99cmCkepspROw3I96zBcm58oXs6+Q/BnD\n/OWET5sBvR9oTv9GNRVJ1rvSMAEJAgMBAAECgYByu3QO0qF9h7X3JEu0Ld4cKBnB\ngiQ2uJC/et7KxIJ/LOvw9GopBthyt27KwG1ntBkJpkTuAaQHkyNns7vLkNB0S0IR\n+owVFEcKYq9VCHTaiQU8TDp24gN+yPTrpRuH8YhDVq5SfVdVuTMgHVQdj4ya4VlF\nGj+a7+ipxtGiLsVGrQJBAM7p0Fm0xmzi+tBOASUAcVrPLcteFIaTBFwfq16dm/ON\n00Khla8Et5kMBttTbqbukl8mxFjBEEBlhQqb6EdQQ0sCQQDIhHx1a9diG7y/4DQA\n4KvR3FCYwP8PBORlSamegzCo+P1OzxiEo0amX7yQMA5UyiP/kUsZrme2JBZgna8S\np4R7AkEAr7rMhSOPUnMD6V4WgsJ5g1Jp5kqkzBaYoVUUSms5RASz4+cwJVCwTX91\nY1jcpVIBZmaaY3a0wrx13ajEAa0dOQJBAIpjnb4wqpsEh7VpmJqOdSdGxb1XXfFQ\nsA0T1OQYqQnFppWwqrxIL+d9pZdiA1ITnNqyvUFBNETqDSOrUHwwb2cCQGArE+vu\nffPUWQ0j+fiK+covFG8NL7H+26NSGB5+Xsn9uwOGLj7K/YT6CbBtr9hJiuWjM1Al\n0V4ltlTuu2mTMaw=\n-----END PRIVATE KEY-----"
  key_type = "RSA"
  modulus = "mod1024"
  name_alias = "name_alias"
  owner_key = "owner_key"
  owner_tag = "owner_tag"
  regenerate = "no"
}
`

const testConfigPkiKeyRingReset = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
  admin_state = "started"
  annotation = "orchestrator:terraform"
  certificate = ""
  certificate_authority = ""
  description = ""
  elliptic_curve = "none"
  key = ""
  key_type = "RSA"
  modulus = "mod2048"
  name_alias = ""
  owner_key = ""
  owner_tag = ""
  regenerate = "no"
}
`
const testConfigPkiKeyRingChildren = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigPkiKeyRingChildrenRemoveFromConfig = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
}
`

const testConfigPkiKeyRingChildrenRemoveOne = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
  annotations = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigPkiKeyRingChildrenRemoveAll = testDependencyConfigPkiKeyRing + `
resource "aci_key_ring" "test" {
  name = "test_name"
  annotations = []
  tags = []
}
`

const testConfigPkiKeyRingMinDependencyWithFvTenantAllowExisting = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
resource "aci_key_ring" "test_2" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  depends_on = [aci_key_ring.test]
}
`

const testConfigPkiKeyRingMinDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
`

const testConfigPkiKeyRingAllDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  admin_state = "completed"
  annotation = "annotation"
  certificate = "-----BEGIN CERTIFICATE-----\nMIICODCCAaGgAwIBAgIJAIt8XMntue0VMA0GCSqGSIb3DQEBCwUAMDQxDjAMBgNV\nBAMMBUFkbWluMRUwEwYDVQQKDAxZb3VyIENvbXBhbnkxCzAJBgNVBAYTAlVTMCAX\nDTE4MDEwOTAwNTk0NFoYDzIxMTcxMjE2MDA1OTQ0WjA0MQ4wDAYDVQQDDAVBZG1p\nbjEVMBMGA1UECgwMWW91ciBDb21wYW55MQswCQYDVQQGEwJVUzCBnzANBgkqhkiG\n9w0BAQEFAAOBjQAwgYkCgYEAohG/7axtt7CbSaMP7r+2mhTKbNgh0Ww36C7Ta14i\nv+VmLyKkQHnXinKGhp6uy3Nug+15a+eIu7CrgpBVMQeCiWfsnwRocKcQJWIYDrWl\nXHxGQn31yYKR6mylE7Dcj3rMFybnyhezr5D8GcP85YRPmwG9H2hO/0Y1FUnWu9Iw\nAQkCAwEAAaNQME4wHQYDVR0OBBYEFD0jLXfpkrU/ChzRvfruRs/fy1VXMB8GA1Ud\nIwQYMBaAFD0jLXfpkrU/ChzRvfruRs/fy1VXMAwGA1UdEwQFMAMBAf8wDQYJKoZI\nhvcNAQELBQADgYEAOmvre+5tgZ0+F3DgsfxNQqLTrGiBgGCIymPkP/cBXXkNuJyl\n3ac7tArHQc7WEA4U2R2rZbEq8FC3UJJm4nUVtCPvEh3G9OhN2xwYev79yt6pIn/l\nKU0Td2OpVyo0eLqjoX5u2G90IBWzhyjFbo+CcKMrSVKj1YOdG0E3OuiJf00=\n-----END CERTIFICATE-----"
  certificate_authority = "test_name"
  description = "description"
  elliptic_curve = "none"
  key = "-----BEGIN PRIVATE KEY-----\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKIRv+2sbbewm0mj\nD+6/tpoUymzYIdFsN+gu02teIr/lZi8ipEB514pyhoaerstzboPteWvniLuwq4KQ\nVTEHgoln7J8EaHCnECViGA61pVx8RkJ99cmCkepspROw3I96zBcm58oXs6+Q/BnD\n/OWET5sBvR9oTv9GNRVJ1rvSMAEJAgMBAAECgYByu3QO0qF9h7X3JEu0Ld4cKBnB\ngiQ2uJC/et7KxIJ/LOvw9GopBthyt27KwG1ntBkJpkTuAaQHkyNns7vLkNB0S0IR\n+owVFEcKYq9VCHTaiQU8TDp24gN+yPTrpRuH8YhDVq5SfVdVuTMgHVQdj4ya4VlF\nGj+a7+ipxtGiLsVGrQJBAM7p0Fm0xmzi+tBOASUAcVrPLcteFIaTBFwfq16dm/ON\n00Khla8Et5kMBttTbqbukl8mxFjBEEBlhQqb6EdQQ0sCQQDIhHx1a9diG7y/4DQA\n4KvR3FCYwP8PBORlSamegzCo+P1OzxiEo0amX7yQMA5UyiP/kUsZrme2JBZgna8S\np4R7AkEAr7rMhSOPUnMD6V4WgsJ5g1Jp5kqkzBaYoVUUSms5RASz4+cwJVCwTX91\nY1jcpVIBZmaaY3a0wrx13ajEAa0dOQJBAIpjnb4wqpsEh7VpmJqOdSdGxb1XXfFQ\nsA0T1OQYqQnFppWwqrxIL+d9pZdiA1ITnNqyvUFBNETqDSOrUHwwb2cCQGArE+vu\nffPUWQ0j+fiK+covFG8NL7H+26NSGB5+Xsn9uwOGLj7K/YT6CbBtr9hJiuWjM1Al\n0V4ltlTuu2mTMaw=\n-----END PRIVATE KEY-----"
  key_type = "RSA"
  modulus = "mod1024"
  name_alias = "name_alias"
  owner_key = "owner_key"
  owner_tag = "owner_tag"
  regenerate = "no"
}
`

const testConfigPkiKeyRingResetDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  admin_state = "started"
  annotation = "orchestrator:terraform"
  certificate = ""
  certificate_authority = ""
  description = ""
  elliptic_curve = "none"
  key = ""
  key_type = "RSA"
  modulus = "mod2048"
  name_alias = ""
  owner_key = ""
  owner_tag = ""
  regenerate = "no"
}
`
const testConfigPkiKeyRingChildrenDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [
	{
	  key = "key_0"
	  value = "value_1"
	},
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigPkiKeyRingChildrenRemoveFromConfigDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
}
`

const testConfigPkiKeyRingChildrenRemoveOneDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
  tags = [ 
	{
	  key = "key_1"
	  value = "value_2"
	},
  ]
}
`

const testConfigPkiKeyRingChildrenRemoveAllDependencyWithFvTenant = testDependencyConfigPkiKeyRing + testConfigFvTenantMin + `
resource "aci_key_ring" "test" {
  parent_dn = aci_tenant.test.id
  name = "test_name"
  annotations = []
  tags = []
}
`
