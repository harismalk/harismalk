// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"
	"strings"

	"github.com/ciscoecosystem/aci-go-client/v2/client"
	"github.com/ciscoecosystem/aci-go-client/v2/container"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CommPolResource{}
var _ resource.ResourceWithImportState = &CommPolResource{}

func NewCommPolResource() resource.Resource {
	return &CommPolResource{}
}

// CommPolResource defines the resource implementation.
type CommPolResource struct {
	client *client.Client
}

// CommPolResourceModel describes the resource data model.
type CommPolResourceModel struct {
	Id                            types.String `tfsdk:"id"`
	Annotation                    types.String `tfsdk:"annotation"`
	Descr                         types.String `tfsdk:"description"`
	Name                          types.String `tfsdk:"name"`
	NameAlias                     types.String `tfsdk:"name_alias"`
	OwnerKey                      types.String `tfsdk:"owner_key"`
	OwnerTag                      types.String `tfsdk:"owner_tag"`
	StrictSecurityOnApicOOBSubnet types.String `tfsdk:"strict_security_on_apic_oob_subnet"`
	CommHttps                     types.Set    `tfsdk:"http_ssl_configuration"`
	TagAnnotation                 types.Set    `tfsdk:"annotations"`
	TagTag                        types.Set    `tfsdk:"tags"`
}

// CommHttpsCommPolResourceModel describes the resource data model for the children without relation ships.
type CommHttpsCommPolResourceModel struct {
	AccessControlAllowCredential types.String `tfsdk:"access_control_allow_credential"`
	AccessControlAllowOrigins    types.String `tfsdk:"access_control_allow_origins"`
	AdminSt                      types.String `tfsdk:"admin_st"`
	Annotation                   types.String `tfsdk:"annotation"`
	CliOnlyMode                  types.String `tfsdk:"cli_only_mode"`
	ClientCertAuthState          types.String `tfsdk:"client_cert_auth_state"`
	Descr                        types.String `tfsdk:"description"`
	DhParam                      types.String `tfsdk:"dh_param"`
	GlobalThrottleRate           types.String `tfsdk:"global_throttle_rate"`
	GlobalThrottleSt             types.String `tfsdk:"global_throttle_st"`
	GlobalThrottleUnit           types.String `tfsdk:"global_throttle_unit"`
	MaxRequestStatusCount        types.String `tfsdk:"max_request_status_count"`
	Name                         types.String `tfsdk:"name"`
	NameAlias                    types.String `tfsdk:"name_alias"`
	NodeExporter                 types.String `tfsdk:"node_exporter"`
	Port                         types.String `tfsdk:"port"`
	Referer                      types.String `tfsdk:"referer"`
	ServerHeader                 types.String `tfsdk:"server_header"`
	SslProtocols                 types.Set    `tfsdk:"ssl_protocols"`
	ThrottleRate                 types.String `tfsdk:"throttle_rate"`
	ThrottleSt                   types.String `tfsdk:"throttle_st"`
	VisoreAccess                 types.String `tfsdk:"visore_access"`
	CommRsClientCertCA           types.Set    `tfsdk:"tp"`
	CommRsKeyRing                types.Set    `tfsdk:"key_ring"`
}

func CommHttpsCommPolResourceModelAttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"access_control_allow_credential": types.StringType,
		"access_control_allow_origins":    types.StringType,
		"admin_st":                        types.StringType,
		"annotation":                      types.StringType,
		"cli_only_mode":                   types.StringType,
		"client_cert_auth_state":          types.StringType,
		"description":                     types.StringType,
		"dh_param":                        types.StringType,
		"global_throttle_rate":            types.StringType,
		"global_throttle_st":              types.StringType,
		"global_throttle_unit":            types.StringType,
		"max_request_status_count":        types.StringType,
		"name":                            types.StringType,
		"name_alias":                      types.StringType,
		"node_exporter":                   types.StringType,
		"port":                            types.StringType,
		"referer":                         types.StringType,
		"server_header":                   types.StringType,
		"ssl_protocols":                   types.SetType{ElemType: types.StringType},
		"throttle_rate":                   types.StringType,
		"throttle_st":                     types.StringType,
		"visore_access":                   types.StringType,
		"tp":                              types.SetType{ElemType: types.StringType},
		"key_ring":                        types.SetType{ElemType: types.StringType},
	}
}
func CommHttpsCommPolResourceModelElementType() attr.TypeWithAttributeTypes {
	return basetypes.ObjectType.WithAttributeTypes(basetypes.ObjectType{}, CommHttpsCommPolResourceModelAttributeTypes())
}

// CommRsClientCertCACommHttpsResourceModel describes the resource data model for the children without relation ships.
type CommRsClientCertCACommHttpsResourceModel struct {
	Annotation types.String `tfsdk:"annotation"`
	TDn        types.String `tfsdk:"target_dn"`
}

func CommRsClientCertCACommHttpsResourceModelAttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"annotation": types.StringType,
		"target_dn":  types.StringType,
	}
}
func CommRsClientCertCACommHttpsResourceModelElementType() attr.TypeWithAttributeTypes {
	return basetypes.ObjectType.WithAttributeTypes(basetypes.ObjectType{}, CommRsClientCertCACommHttpsResourceModelAttributeTypes())
}

// CommRsKeyRingCommHttpsResourceModel describes the resource data model for the children without relation ships.
type CommRsKeyRingCommHttpsResourceModel struct {
	Annotation       types.String `tfsdk:"annotation"`
	TnPkiKeyRingName types.String `tfsdk:"tn_pki_key_ring_name"`
}

func CommRsKeyRingCommHttpsResourceModelAttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"annotation":           types.StringType,
		"tn_pki_key_ring_name": types.StringType,
	}
}
func CommRsKeyRingCommHttpsResourceModelElementType() attr.TypeWithAttributeTypes {
	return basetypes.ObjectType.WithAttributeTypes(basetypes.ObjectType{}, CommRsKeyRingCommHttpsResourceModelAttributeTypes())
}

// TagAnnotationCommPolResourceModel describes the resource data model for the children without relation ships.
type TagAnnotationCommPolResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func TagAnnotationCommPolResourceModelAttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	}
}
func TagAnnotationCommPolResourceModelElementType() attr.TypeWithAttributeTypes {
	return basetypes.ObjectType.WithAttributeTypes(basetypes.ObjectType{}, TagAnnotationCommPolResourceModelAttributeTypes())
}

// TagTagCommPolResourceModel describes the resource data model for the children without relation ships.
type TagTagCommPolResourceModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func TagTagCommPolResourceModelAttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	}
}
func TagTagCommPolResourceModelElementType() attr.TypeWithAttributeTypes {
	return basetypes.ObjectType.WithAttributeTypes(basetypes.ObjectType{}, TagTagCommPolResourceModelAttributeTypes())
}

type CommPolIdentifier struct {
	Name types.String
}

func (r *CommPolResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	tflog.Debug(ctx, "Start metadata of resource: aci_communication_policy")
	resp.TypeName = req.ProviderTypeName + "_communication_policy"
	tflog.Debug(ctx, "End metadata of resource: aci_communication_policy")
}

func (r *CommPolResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	tflog.Debug(ctx, "Start schema of resource: aci_communication_policy")
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "The communication_policy resource for the 'commPol' class",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The distinguished name (DN) of the Communication Policy object.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"annotation": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Default:             stringdefault.StaticString(globalAnnotation),
				MarkdownDescription: `The annotation of the Communication Policy object.`,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The description of the Communication Policy object.`,
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
					stringplanmodifier.RequiresReplace(),
				},
				MarkdownDescription: `The name of the Communication Policy object.`,
			},
			"name_alias": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The name alias of the Communication Policy object.`,
			},
			"owner_key": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `The key for enabling clients to own their data for entity correlation.`,
			},
			"owner_tag": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				MarkdownDescription: `A tag for enabling clients to add their own data. For example, to indicate who created this object.`,
			},
			"strict_security_on_apic_oob_subnet": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("no", "yes"),
				},
				MarkdownDescription: `remove implicit access on apic oob from any apic OOB subnet IP.`,
			},
			"http_ssl_configuration": schema.SetNestedAttribute{
				MarkdownDescription: `HTTPS`,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.Set{
					setvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"access_control_allow_credential": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `accessControlAllowCredential.`,
						},
						"access_control_allow_origins": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: ``,
						},
						"admin_st": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `The state of HTTPS communication service. This can be enabled or disabled.`,
						},
						"annotation": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The annotation of the Http Ssl Configuration object.`,
						},
						"cli_only_mode": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `CLI only mode.`,
						},
						"client_cert_auth_state": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `Client Cert Auth State.`,
						},
						"description": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The description of the Http Ssl Configuration object.`,
						},
						"dh_param": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("1024", "2048", "4096", "none"),
							},
							MarkdownDescription: `DH Parameter.`,
						},
						"global_throttle_rate": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The maximum MO api calls allowed per unit time.`,
						},
						"global_throttle_st": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `Throttle state for all clients without tag0 in header.`,
						},
						"global_throttle_unit": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `Unit of rate limit.`,
						},
						"max_request_status_count": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The maximum number of request status objects to keep.`,
						},
						"name": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The name of the Http Ssl Configuration object.`,
						},
						"name_alias": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The name alias of the Http Ssl Configuration object.`,
						},
						"node_exporter": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `Node Exporter service.`,
						},
						"port": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The port used for HTTPS communication service.`,
						},
						"referer": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `Allowed HTTP referer space separated list.`,
						},
						"server_header": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `Server Header.`,
						},
						"ssl_protocols": schema.SetAttribute{
							MarkdownDescription: `The Secure Socket Layer (SSL) protocol.`,
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.Set{
								setplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.Set{
								setvalidator.SizeAtMost(4),
								setvalidator.ValueStringsAre(
									stringvalidator.OneOf("TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"),
								),
							},
							ElementType: types.StringType,
						},
						"throttle_rate": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The maximum login/refresh allowed per second.`,
						},
						"throttle_st": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `Login/refresh throttle state.`,
						},
						"visore_access": schema.StringAttribute{
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disabled", "enabled"),
							},
							MarkdownDescription: `Visore Access.`,
						},
						"tp": schema.SetNestedAttribute{
							MarkdownDescription: ``,
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.Set{
								setplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.Set{
								setvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"annotation": schema.StringAttribute{
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
											SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
										},
										MarkdownDescription: `The annotation of the Tp object.`,
									},
									"target_dn": schema.StringAttribute{
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
											SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
										},
										MarkdownDescription: `The distinguished name of the target.`,
									},
								},
							},
						},
						"key_ring": schema.SetNestedAttribute{
							MarkdownDescription: `A source relation to a key ring.`,
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.Set{
								setplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.Set{
								setvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"annotation": schema.StringAttribute{
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
											SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
										},
										MarkdownDescription: `The annotation of the Key Ring object.`,
									},
									"tn_pki_key_ring_name": schema.StringAttribute{
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.UseStateForUnknown(),
											SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
										},
										MarkdownDescription: `The HTTP connection key ring. Each PKI device holds a pair of asymmetric Rivest-Shamir-Adleman (RSA) or Elliptic Curve Cryptography (ECC) encryption keys, one kept private and one made public, stored in an internal key ring.`,
									},
								},
							},
						},
					},
				},
			},
			"annotations": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
			"tags": schema.SetNestedAttribute{
				MarkdownDescription: ``,
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The key used to uniquely identify this configuration object.`,
						},
						"value": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
								SetToStringNullWhenStateIsNullPlanIsUnknownDuringUpdate(),
							},
							MarkdownDescription: `The value of the property.`,
						},
					},
				},
			},
		},
	}
	tflog.Debug(ctx, "End schema of resource: aci_communication_policy")
}

func (r *CommPolResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	tflog.Debug(ctx, "Start configure of resource: aci_communication_policy")
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*client.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *client.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	tflog.Debug(ctx, "End configure of resource: aci_communication_policy")
}

func (r *CommPolResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Debug(ctx, "Start create of resource: aci_communication_policy")
	// On create retrieve information on current state prior to making any changes in order to determine child delete operations
	var stateData *CommPolResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &stateData)...)
	setCommPolId(ctx, stateData)
	getAndSetCommPolAttributes(ctx, &resp.Diagnostics, r.client, stateData)

	var data *CommPolResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	setCommPolId(ctx, data)

	tflog.Debug(ctx, fmt.Sprintf("Create of resource aci_communication_policy with id '%s'", data.Id.ValueString()))

	var commHttpsPlan, commHttpsState []CommHttpsCommPolResourceModel
	data.CommHttps.ElementsAs(ctx, &commHttpsPlan, false)
	stateData.CommHttps.ElementsAs(ctx, &commHttpsState, false)
	var tagAnnotationPlan, tagAnnotationState []TagAnnotationCommPolResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagCommPolResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getCommPolCreateJsonPayload(ctx, &resp.Diagnostics, data, commHttpsPlan, commHttpsState, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetCommPolAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End create of resource aci_communication_policy with id '%s'", data.Id.ValueString()))
}

func (r *CommPolResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Debug(ctx, "Start read of resource: aci_communication_policy")
	var data *CommPolResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Read of resource aci_communication_policy with id '%s'", data.Id.ValueString()))

	getAndSetCommPolAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	if data.Id.IsNull() {
		var emptyData *CommPolResourceModel
		resp.Diagnostics.Append(resp.State.Set(ctx, &emptyData)...)
	} else {
		resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	}

	tflog.Debug(ctx, fmt.Sprintf("End read of resource aci_communication_policy with id '%s'", data.Id.ValueString()))
}

func (r *CommPolResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Debug(ctx, "Start update of resource: aci_communication_policy")
	var data *CommPolResourceModel
	var stateData *CommPolResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &stateData)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Update of resource aci_communication_policy with id '%s'", data.Id.ValueString()))

	var commHttpsPlan, commHttpsState []CommHttpsCommPolResourceModel
	data.CommHttps.ElementsAs(ctx, &commHttpsPlan, false)
	stateData.CommHttps.ElementsAs(ctx, &commHttpsState, false)
	var tagAnnotationPlan, tagAnnotationState []TagAnnotationCommPolResourceModel
	data.TagAnnotation.ElementsAs(ctx, &tagAnnotationPlan, false)
	stateData.TagAnnotation.ElementsAs(ctx, &tagAnnotationState, false)
	var tagTagPlan, tagTagState []TagTagCommPolResourceModel
	data.TagTag.ElementsAs(ctx, &tagTagPlan, false)
	stateData.TagTag.ElementsAs(ctx, &tagTagState, false)
	jsonPayload := getCommPolCreateJsonPayload(ctx, &resp.Diagnostics, data, commHttpsPlan, commHttpsState, tagAnnotationPlan, tagAnnotationState, tagTagPlan, tagTagState)

	if resp.Diagnostics.HasError() {
		return
	}

	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)

	if resp.Diagnostics.HasError() {
		return
	}

	getAndSetCommPolAttributes(ctx, &resp.Diagnostics, r.client, data)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	tflog.Debug(ctx, fmt.Sprintf("End update of resource aci_communication_policy with id '%s'", data.Id.ValueString()))
}

func (r *CommPolResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Debug(ctx, "Start delete of resource: aci_communication_policy")
	var data *CommPolResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("Delete of resource aci_communication_policy with id '%s'", data.Id.ValueString()))
	jsonPayload := GetDeleteJsonPayload(ctx, &resp.Diagnostics, "commPol", data.Id.ValueString())
	if resp.Diagnostics.HasError() {
		return
	}
	DoRestRequest(ctx, &resp.Diagnostics, r.client, fmt.Sprintf("api/mo/%s.json", data.Id.ValueString()), "POST", jsonPayload)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("End delete of resource aci_communication_policy with id '%s'", data.Id.ValueString()))
}

func (r *CommPolResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Start import state of resource: aci_communication_policy")
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)

	var stateData *CommPolResourceModel
	resp.Diagnostics.Append(resp.State.Get(ctx, &stateData)...)
	tflog.Debug(ctx, fmt.Sprintf("Import state of resource aci_communication_policy with id '%s'", stateData.Id.ValueString()))

	tflog.Debug(ctx, "End import of state resource: aci_communication_policy")
}

func getAndSetCommPolAttributes(ctx context.Context, diags *diag.Diagnostics, client *client.Client, data *CommPolResourceModel) {
	requestData := DoRestRequest(ctx, diags, client, fmt.Sprintf("api/mo/%s.json?rsp-subtree=full&rsp-subtree-class=%s", data.Id.ValueString(), "commPol,commHttps,tagAnnotation,tagTag,commRsClientCertCA,commRsKeyRing"), "GET", nil)

	if diags.HasError() {
		return
	}
	if requestData.Search("imdata").Search("commPol").Data() != nil {
		classReadInfo := requestData.Search("imdata").Search("commPol").Data().([]interface{})
		if len(classReadInfo) == 1 {
			attributes := classReadInfo[0].(map[string]interface{})["attributes"].(map[string]interface{})
			for attributeName, attributeValue := range attributes {
				if attributeName == "dn" {
					data.Id = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "annotation" {
					data.Annotation = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "descr" {
					data.Descr = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "name" {
					data.Name = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "nameAlias" {
					data.NameAlias = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ownerKey" {
					data.OwnerKey = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "ownerTag" {
					data.OwnerTag = basetypes.NewStringValue(attributeValue.(string))
				}
				if attributeName == "strictSecurityOnApicOOBSubnet" {
					data.StrictSecurityOnApicOOBSubnet = basetypes.NewStringValue(attributeValue.(string))
				}
			}
			if data.Annotation.IsUnknown() {
				data.Annotation = types.StringNull()
			}
			if data.Descr.IsUnknown() {
				data.Descr = types.StringNull()
			}
			if data.Name.IsUnknown() {
				data.Name = types.StringNull()
			}
			if data.NameAlias.IsUnknown() {
				data.NameAlias = types.StringNull()
			}
			if data.OwnerKey.IsUnknown() {
				data.OwnerKey = types.StringNull()
			}
			if data.OwnerTag.IsUnknown() {
				data.OwnerTag = types.StringNull()
			}
			if data.StrictSecurityOnApicOOBSubnet.IsUnknown() {
				data.StrictSecurityOnApicOOBSubnet = types.StringNull()
			}
			CommHttpsCommPol := CommHttpsCommPolResourceModel{}
			CommHttpsCommPolList := make([]CommHttpsCommPolResourceModel, 0)
			CommRsClientCertCACommHttps := CommRsClientCertCACommHttpsResourceModel{}
			CommRsClientCertCACommHttpsList := make([]CommRsClientCertCACommHttpsResourceModel, 0)
			CommRsKeyRingCommHttps := CommRsKeyRingCommHttpsResourceModel{}
			CommRsKeyRingCommHttpsList := make([]CommRsKeyRingCommHttpsResourceModel, 0)
			TagAnnotationCommPol := TagAnnotationCommPolResourceModel{}
			TagAnnotationCommPolList := make([]TagAnnotationCommPolResourceModel, 0)
			TagTagCommPol := TagTagCommPolResourceModel{}
			TagTagCommPolList := make([]TagTagCommPolResourceModel, 0)
			_, ok := classReadInfo[0].(map[string]interface{})["children"]
			if ok {
				children := classReadInfo[0].(map[string]interface{})["children"].([]interface{})
				for _, child := range children {
					for childClassName, childClassDetails := range child.(map[string]interface{}) {
						childAttributes := childClassDetails.(map[string]interface{})["attributes"].(map[string]interface{})
						if childClassName == "commHttps" {
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "accessControlAllowCredential" {
									CommHttpsCommPol.AccessControlAllowCredential = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "accessControlAllowOrigins" {
									CommHttpsCommPol.AccessControlAllowOrigins = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "adminSt" {
									CommHttpsCommPol.AdminSt = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "annotation" {
									CommHttpsCommPol.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "cliOnlyMode" {
									CommHttpsCommPol.CliOnlyMode = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "clientCertAuthState" {
									CommHttpsCommPol.ClientCertAuthState = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "descr" {
									CommHttpsCommPol.Descr = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "dhParam" && childAttributeValue.(string) == "" {
									CommHttpsCommPol.DhParam = basetypes.NewStringValue("none")
								} else if childAttributeName == "dhParam" {
									CommHttpsCommPol.DhParam = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "globalThrottleRate" {
									CommHttpsCommPol.GlobalThrottleRate = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "globalThrottleSt" {
									CommHttpsCommPol.GlobalThrottleSt = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "globalThrottleUnit" {
									CommHttpsCommPol.GlobalThrottleUnit = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "maxRequestStatusCount" {
									CommHttpsCommPol.MaxRequestStatusCount = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "name" {
									CommHttpsCommPol.Name = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "nameAlias" {
									CommHttpsCommPol.NameAlias = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "nodeExporter" {
									CommHttpsCommPol.NodeExporter = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "port" {
									CommHttpsCommPol.Port = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "referer" {
									CommHttpsCommPol.Referer = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "serverHeader" {
									CommHttpsCommPol.ServerHeader = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "sslProtocols" {
									sslProtocolsList := strings.Split(childAttributeValue.(string), ",")
									sslProtocolsSet, _ := types.SetValueFrom(ctx, basetypes.StringType{}, sslProtocolsList)
									CommHttpsCommPol.SslProtocols = sslProtocolsSet

								}
								if childAttributeName == "throttleRate" {
									CommHttpsCommPol.ThrottleRate = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "throttleSt" {
									CommHttpsCommPol.ThrottleSt = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "visoreAccess" {
									CommHttpsCommPol.VisoreAccess = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							_, childrenOfCommHttpsExist := childClassDetails.(map[string]interface{})["children"]
							if childrenOfCommHttpsExist {
								childClassesOfCommHttps := childClassDetails.(map[string]interface{})["children"].([]interface{})
								for _, childCommHttps := range childClassesOfCommHttps {
									for childClassNameCommHttps, childClassDetailsCommHttps := range childCommHttps.(map[string]interface{}) {
										if childClassNameCommHttps == "commRsClientCertCA" {
											commRsClientCertCAchildAttributeValue := childClassDetailsCommHttps.(map[string]interface{})["attributes"].(map[string]interface{})
											for childAttributeName, childAttributeValue := range commRsClientCertCAchildAttributeValue {
												if childAttributeName == "annotation" {
													CommRsClientCertCACommHttps.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
												}
												if childAttributeName == "tDn" {
													CommRsClientCertCACommHttps.TDn = basetypes.NewStringValue(childAttributeValue.(string))
												}
											}
											CommRsClientCertCACommHttpsList = append(CommRsClientCertCACommHttpsList, CommRsClientCertCACommHttps)
										}
										if childClassNameCommHttps == "commRsKeyRing" {
											commRsKeyRingchildAttributeValue := childClassDetailsCommHttps.(map[string]interface{})["attributes"].(map[string]interface{})
											for childAttributeName, childAttributeValue := range commRsKeyRingchildAttributeValue {
												if childAttributeName == "annotation" {
													CommRsKeyRingCommHttps.Annotation = basetypes.NewStringValue(childAttributeValue.(string))
												}
												if childAttributeName == "tnPkiKeyRingName" {
													CommRsKeyRingCommHttps.TnPkiKeyRingName = basetypes.NewStringValue(childAttributeValue.(string))
												}
											}
											CommRsKeyRingCommHttpsList = append(CommRsKeyRingCommHttpsList, CommRsKeyRingCommHttps)
										}
									}
								}
							}
							if len(CommRsClientCertCACommHttpsList) > 0 {
								CommRsClientCertCASet, _ := types.SetValueFrom(ctx, CommRsClientCertCACommHttpsResourceModelElementType(), CommRsClientCertCACommHttpsList)
								CommHttpsCommPol.CommRsClientCertCA = CommRsClientCertCASet
							} else {
								CommHttpsCommPol.CommRsClientCertCA = types.SetNull(CommRsClientCertCACommHttpsResourceModelElementType())
							}
							if len(CommRsKeyRingCommHttpsList) > 0 {
								CommRsKeyRingSet, _ := types.SetValueFrom(ctx, CommRsKeyRingCommHttpsResourceModelElementType(), CommRsKeyRingCommHttpsList)
								CommHttpsCommPol.CommRsKeyRing = CommRsKeyRingSet
							} else {
								CommHttpsCommPol.CommRsKeyRing = types.SetNull(CommRsKeyRingCommHttpsResourceModelElementType())
							}
							CommHttpsCommPolList = append(CommHttpsCommPolList, CommHttpsCommPol)
						}
						if childClassName == "tagAnnotation" {
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagAnnotationCommPol.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagAnnotationCommPol.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagAnnotationCommPolList = append(TagAnnotationCommPolList, TagAnnotationCommPol)
						}
						if childClassName == "tagTag" {
							for childAttributeName, childAttributeValue := range childAttributes {
								if childAttributeName == "key" {
									TagTagCommPol.Key = basetypes.NewStringValue(childAttributeValue.(string))
								}
								if childAttributeName == "value" {
									TagTagCommPol.Value = basetypes.NewStringValue(childAttributeValue.(string))
								}

							}
							TagTagCommPolList = append(TagTagCommPolList, TagTagCommPol)
						}
					}
				}
			}
			if len(CommHttpsCommPolList) > 0 {
				commHttpsSet, _ := types.SetValueFrom(ctx, data.CommHttps.ElementType(ctx), CommHttpsCommPolList)
				data.CommHttps = commHttpsSet
			}
			if len(TagAnnotationCommPolList) > 0 {
				tagAnnotationSet, _ := types.SetValueFrom(ctx, data.TagAnnotation.ElementType(ctx), TagAnnotationCommPolList)
				data.TagAnnotation = tagAnnotationSet
			}
			if len(TagTagCommPolList) > 0 {
				tagTagSet, _ := types.SetValueFrom(ctx, data.TagTag.ElementType(ctx), TagTagCommPolList)
				data.TagTag = tagTagSet
			}
		} else {
			diags.AddError(
				"too many results in response",
				fmt.Sprintf("%v matches returned for class 'commPol'. Please report this issue to the provider developers.", len(classReadInfo)),
			)
		}
	} else {
		data.Id = basetypes.NewStringNull()
	}
}

func getCommPolRn(ctx context.Context, data *CommPolResourceModel) string {
	rn := "fabric/comm-{name}"
	for _, identifier := range []string{"name"} {
		fieldName := fmt.Sprintf("%s%s", strings.ToUpper(identifier[:1]), identifier[1:])
		fieldValue := reflect.ValueOf(data).Elem().FieldByName(fieldName).Interface().(basetypes.StringValue).ValueString()
		rn = strings.ReplaceAll(rn, fmt.Sprintf("{%s}", identifier), fieldValue)
	}
	return rn
}

func setCommPolId(ctx context.Context, data *CommPolResourceModel) {
	rn := getCommPolRn(ctx, data)
	data.Id = types.StringValue(fmt.Sprintf("%s/%s", strings.Split([]string{"uni/fabric/comm-{name}"}[0], "/")[0], rn))
}

func getCommPolCommHttpsChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *CommPolResourceModel, commHttpsPlan, commHttpsState []CommHttpsCommPolResourceModel) []map[string]interface{} {
	childMap := newAciObjectType()
	childPayloads := []map[string]interface{}{}
	commRsClientCertCAChildMap := newAciObjectType()
	commRsKeyRingChildMap := newAciObjectType()
	CommHttpsChildren := make([]map[string]interface{}, 0)
	if !data.CommHttps.IsUnknown() {
		for _, commHttps := range commHttpsPlan {
			if !commHttps.AccessControlAllowCredential.IsUnknown() {
				childMap.Attributes["accessControlAllowCredential"] = commHttps.AccessControlAllowCredential.ValueString()
			}
			if !commHttps.AccessControlAllowOrigins.IsUnknown() {
				childMap.Attributes["accessControlAllowOrigins"] = commHttps.AccessControlAllowOrigins.ValueString()
			}
			if !commHttps.AdminSt.IsUnknown() {
				childMap.Attributes["adminSt"] = commHttps.AdminSt.ValueString()
			}
			if !commHttps.Annotation.IsUnknown() {
				childMap.Attributes["annotation"] = commHttps.Annotation.ValueString()
			} else {
				childMap.Attributes["annotation"] = globalAnnotation
			}
			if !commHttps.CliOnlyMode.IsUnknown() {
				childMap.Attributes["cliOnlyMode"] = commHttps.CliOnlyMode.ValueString()
			}
			if !commHttps.ClientCertAuthState.IsUnknown() {
				childMap.Attributes["clientCertAuthState"] = commHttps.ClientCertAuthState.ValueString()
			}
			if !commHttps.Descr.IsUnknown() {
				childMap.Attributes["descr"] = commHttps.Descr.ValueString()
			}
			if !commHttps.DhParam.IsUnknown() {
				childMap.Attributes["dhParam"] = commHttps.DhParam.ValueString()
			}
			if !commHttps.GlobalThrottleRate.IsUnknown() {
				childMap.Attributes["globalThrottleRate"] = commHttps.GlobalThrottleRate.ValueString()
			}
			if !commHttps.GlobalThrottleSt.IsUnknown() {
				childMap.Attributes["globalThrottleSt"] = commHttps.GlobalThrottleSt.ValueString()
			}
			if !commHttps.GlobalThrottleUnit.IsUnknown() {
				childMap.Attributes["globalThrottleUnit"] = commHttps.GlobalThrottleUnit.ValueString()
			}
			if !commHttps.MaxRequestStatusCount.IsUnknown() {
				childMap.Attributes["maxRequestStatusCount"] = commHttps.MaxRequestStatusCount.ValueString()
			}
			if !commHttps.Name.IsUnknown() {
				childMap.Attributes["name"] = commHttps.Name.ValueString()
			}
			if !commHttps.NameAlias.IsUnknown() {
				childMap.Attributes["nameAlias"] = commHttps.NameAlias.ValueString()
			}
			if !commHttps.NodeExporter.IsUnknown() {
				childMap.Attributes["nodeExporter"] = commHttps.NodeExporter.ValueString()
			}
			if !commHttps.Port.IsUnknown() {
				childMap.Attributes["port"] = commHttps.Port.ValueString()
			}
			if !commHttps.Referer.IsUnknown() {
				childMap.Attributes["referer"] = commHttps.Referer.ValueString()
			}
			if !commHttps.ServerHeader.IsUnknown() {
				childMap.Attributes["serverHeader"] = commHttps.ServerHeader.ValueString()
			}
			if !commHttps.SslProtocols.IsUnknown() {
				var tmpSslProtocols []string
				commHttps.SslProtocols.ElementsAs(ctx, &tmpSslProtocols, false)
				childMap.Attributes["sslProtocols"] = strings.Join(tmpSslProtocols, ",")
			}
			if !commHttps.ThrottleRate.IsUnknown() {
				childMap.Attributes["throttleRate"] = commHttps.ThrottleRate.ValueString()
			}
			if !commHttps.ThrottleSt.IsUnknown() {
				childMap.Attributes["throttleSt"] = commHttps.ThrottleSt.ValueString()
			}
			if !commHttps.VisoreAccess.IsUnknown() {
				childMap.Attributes["visoreAccess"] = commHttps.VisoreAccess.ValueString()
			}
			var commRsClientCertCAPlan []CommRsClientCertCACommHttpsResourceModel
			commHttps.CommRsClientCertCA.ElementsAs(ctx, &commRsClientCertCAPlan, false)
			for _, commHttpscommRsClientCertCA := range commHttpsState {
				if len(commRsClientCertCAPlan) == 0 && len(commHttpscommRsClientCertCA.CommRsClientCertCA.Elements()) == 1 {
					commRsClientCertCAChildMap := newAciObjectType()
					commRsClientCertCAChildMap.Attributes["status"] = "deleted"
					CommHttpsChildren = append(CommHttpsChildren, map[string]interface{}{"commRsClientCertCA": commRsClientCertCAChildMap})
				}
			}
			if !commHttps.CommRsClientCertCA.IsUnknown() {
				for _, commRsClientCertCA := range commRsClientCertCAPlan {
					if !commRsClientCertCA.Annotation.IsUnknown() {
						commRsClientCertCAChildMap.Attributes["annotation"] = commRsClientCertCA.Annotation.ValueString()
					} else {
						commRsClientCertCAChildMap.Attributes["annotation"] = globalAnnotation
					}
					if !commRsClientCertCA.TDn.IsUnknown() {
						commRsClientCertCAChildMap.Attributes["tDn"] = commRsClientCertCA.TDn.ValueString()
					}
					CommHttpsChildren = append(CommHttpsChildren, map[string]interface{}{"commRsClientCertCA": commRsClientCertCAChildMap})
				}
			}
			var commRsKeyRingPlan []CommRsKeyRingCommHttpsResourceModel
			commHttps.CommRsKeyRing.ElementsAs(ctx, &commRsKeyRingPlan, false)
			for _, commHttpscommRsKeyRing := range commHttpsState {
				if len(commRsKeyRingPlan) == 0 && len(commHttpscommRsKeyRing.CommRsKeyRing.Elements()) == 1 {
					diags.AddError(
						"CommRsKeyRing object cannot be deleted",
						"deletion of child is only possible upon deletion of the parent",
					)
					return nil
				}
			}
			if !commHttps.CommRsKeyRing.IsUnknown() {
				for _, commRsKeyRing := range commRsKeyRingPlan {
					if !commRsKeyRing.Annotation.IsUnknown() {
						commRsKeyRingChildMap.Attributes["annotation"] = commRsKeyRing.Annotation.ValueString()
					} else {
						commRsKeyRingChildMap.Attributes["annotation"] = globalAnnotation
					}
					if !commRsKeyRing.TnPkiKeyRingName.IsUnknown() {
						commRsKeyRingChildMap.Attributes["tnPkiKeyRingName"] = commRsKeyRing.TnPkiKeyRingName.ValueString()
					}
					CommHttpsChildren = append(CommHttpsChildren, map[string]interface{}{"commRsKeyRing": commRsKeyRingChildMap})
				}
			}
			childMap.Children = CommHttpsChildren
			childPayloads = append(childPayloads, map[string]interface{}{"commHttps": childMap})
		}
		if len(commHttpsPlan) == 0 && len(commHttpsState) == 1 {
			diags.AddError(
				"CommHttps object cannot be deleted",
				"deletion of child is only possible upon deletion of the parent",
			)
			return nil
		}
	} else {
		data.CommHttps = types.SetNull(data.CommHttps.ElementType(ctx))
	}

	return childPayloads
}

func getCommPolTagAnnotationChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *CommPolResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationCommPolResourceModel) []map[string]interface{} {
	childMap := newAciObjectType()
	childPayloads := []map[string]interface{}{}
	if !data.TagAnnotation.IsUnknown() {
		tagAnnotationIdentifiers := []TagAnnotationIdentifier{}
		for _, tagAnnotation := range tagAnnotationPlan {
			if !tagAnnotation.Key.IsUnknown() {
				childMap.Attributes["key"] = tagAnnotation.Key.ValueString()
			}
			if !tagAnnotation.Value.IsUnknown() {
				childMap.Attributes["value"] = tagAnnotation.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": childMap})
			tagAnnotationIdentifier := TagAnnotationIdentifier{}
			tagAnnotationIdentifier.Key = tagAnnotation.Key
			tagAnnotationIdentifiers = append(tagAnnotationIdentifiers, tagAnnotationIdentifier)
		}
		for _, tagAnnotation := range tagAnnotationState {
			delete := true
			for _, tagAnnotationIdentifier := range tagAnnotationIdentifiers {
				if tagAnnotationIdentifier.Key == tagAnnotation.Key {
					delete = false
					break
				}
			}
			if delete {
				tagAnnotationChildMapForDelete := newAciObjectType()
				tagAnnotationChildMapForDelete.Attributes["status"] = "deleted"
				tagAnnotationChildMapForDelete.Attributes["key"] = tagAnnotation.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagAnnotation": tagAnnotationChildMapForDelete})
			}
		}
	} else {
		data.TagAnnotation = types.SetNull(data.TagAnnotation.ElementType(ctx))
	}

	return childPayloads
}

func getCommPolTagTagChildPayloads(ctx context.Context, diags *diag.Diagnostics, data *CommPolResourceModel, tagTagPlan, tagTagState []TagTagCommPolResourceModel) []map[string]interface{} {
	childMap := newAciObjectType()
	childPayloads := []map[string]interface{}{}
	if !data.TagTag.IsUnknown() {
		tagTagIdentifiers := []TagTagIdentifier{}
		for _, tagTag := range tagTagPlan {
			if !tagTag.Key.IsUnknown() {
				childMap.Attributes["key"] = tagTag.Key.ValueString()
			}
			if !tagTag.Value.IsUnknown() {
				childMap.Attributes["value"] = tagTag.Value.ValueString()
			}
			childPayloads = append(childPayloads, map[string]interface{}{"tagTag": childMap})
			tagTagIdentifier := TagTagIdentifier{}
			tagTagIdentifier.Key = tagTag.Key
			tagTagIdentifiers = append(tagTagIdentifiers, tagTagIdentifier)
		}
		for _, tagTag := range tagTagState {
			delete := true
			for _, tagTagIdentifier := range tagTagIdentifiers {
				if tagTagIdentifier.Key == tagTag.Key {
					delete = false
					break
				}
			}
			if delete {
				tagTagChildMapForDelete := newAciObjectType()
				tagTagChildMapForDelete.Attributes["status"] = "deleted"
				tagTagChildMapForDelete.Attributes["key"] = tagTag.Key.ValueString()
				childPayloads = append(childPayloads, map[string]interface{}{"tagTag": tagTagChildMapForDelete})
			}
		}
	} else {
		data.TagTag = types.SetNull(data.TagTag.ElementType(ctx))
	}

	return childPayloads
}

func getCommPolCreateJsonPayload(ctx context.Context, diags *diag.Diagnostics, data *CommPolResourceModel, commHttpsPlan, commHttpsState []CommHttpsCommPolResourceModel, tagAnnotationPlan, tagAnnotationState []TagAnnotationCommPolResourceModel, tagTagPlan, tagTagState []TagTagCommPolResourceModel) *container.Container {
	payloadMap := map[string]interface{}{}
	payloadMap["attributes"] = map[string]string{}
	childPayloads := []map[string]interface{}{}

	CommHttpschildPayloads := getCommPolCommHttpsChildPayloads(ctx, diags, data, commHttpsPlan, commHttpsState)
	if CommHttpschildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, CommHttpschildPayloads...)

	TagAnnotationchildPayloads := getCommPolTagAnnotationChildPayloads(ctx, diags, data, tagAnnotationPlan, tagAnnotationState)
	if TagAnnotationchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagAnnotationchildPayloads...)

	TagTagchildPayloads := getCommPolTagTagChildPayloads(ctx, diags, data, tagTagPlan, tagTagState)
	if TagTagchildPayloads == nil {
		return nil
	}
	childPayloads = append(childPayloads, TagTagchildPayloads...)

	payloadMap["children"] = childPayloads
	if !data.Annotation.IsNull() && !data.Annotation.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["annotation"] = data.Annotation.ValueString()
	}
	if !data.Descr.IsNull() && !data.Descr.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["descr"] = data.Descr.ValueString()
	}
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["name"] = data.Name.ValueString()
	}
	if !data.NameAlias.IsNull() && !data.NameAlias.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["nameAlias"] = data.NameAlias.ValueString()
	}
	if !data.OwnerKey.IsNull() && !data.OwnerKey.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ownerKey"] = data.OwnerKey.ValueString()
	}
	if !data.OwnerTag.IsNull() && !data.OwnerTag.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["ownerTag"] = data.OwnerTag.ValueString()
	}
	if !data.StrictSecurityOnApicOOBSubnet.IsNull() && !data.StrictSecurityOnApicOOBSubnet.IsUnknown() {
		payloadMap["attributes"].(map[string]string)["strictSecurityOnApicOOBSubnet"] = data.StrictSecurityOnApicOOBSubnet.ValueString()
	}

	payload, err := json.Marshal(map[string]interface{}{"commPol": payloadMap})
	if err != nil {
		diags.AddError(
			"Marshalling of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}

	jsonPayload, err := container.ParseJSON(payload)

	if err != nil {
		diags.AddError(
			"Construction of json payload failed",
			fmt.Sprintf("Err: %s. Please report this issue to the provider developers.", err),
		)
		return nil
	}
	return jsonPayload
}
