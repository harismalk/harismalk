// Code generated by "gen/generator.go"; DO NOT EDIT.
// In order to regenerate this file execute `go generate` from the repository root.
// More details can be found in the [README](https://github.com/CiscoDevNet/terraform-provider-aci/blob/master/README.md).

package provider

{{- $found_cert := false -}}
{{- range $key, $value := $.all}}
  {{- if contains $key "cert" }}
    {{- $found_cert = true -}}
  {{- end}}
{{- end}}

import (
	"testing"
	"regexp"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
func TestAccDataSource{{$.resourceClassName}}{{if .class_name}}With{{capitalize .class_name}}{{end}} (t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.test_applicable_from_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testConfig{{$.resourceClassName}}DataSource{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}} ,
				ExpectNonEmptyPlan: {{.class_in_parent}},
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- if $found_cert }}
					waitForApicBeforeRefresh,
					{{- end}}
					{{- range $key, $value := $.datasource_required}}
						{{- if eq $key "target_dn" }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}"),
						{{- else }}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
						{{- end }}
					{{- end}}
					{{- end}}
					{{- range $key, $value := $.default}}
						{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
							{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
						{{- end}}
					{{- end}}
					{{- end}}
				),
			},
			{
				Config:      testConfig{{$.resourceClassName}}NotExisting{{if .class_name}}{{capitalize .class_name}}{{end}},
				{{- if $found_cert }}
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
				),
				{{- end}}
				ExpectError: regexp.MustCompile("Failed to read aci_{{$.resourceName}} data source"),
			},
		},
		{{- if $found_cert }}
		CheckDestroy: resource.ComposeAggregateTestCheckFunc(
			waitForApicBeforeRefresh,
	    ),
		{{- end}}
	})
}
	{{- end}}
{{- else}}
func TestAccDataSource{{.resourceClassName}}(t *testing.T) {

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t, "{{.test_type}}", "{{.test_applicable_from_version}}") },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testConfig{{.resourceClassName}}DataSource,
				Check: resource.ComposeAggregateTestCheckFunc(
					{{- if $found_cert }}
					waitForApicBeforeRefresh,
					{{- end}}
					{{- range $key, $value := .min}}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
					{{- end}}
					{{- end}}
					{{- range $key, $value := .all}}
						{{- if (isInterfaceSlice $value)}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}.#", "{{len $value}}"),
							{{- range $index, $subvalue := $value}}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}.{{$index}}", "{{$subvalue}}"),
							{{- end}}
						{{- else}}
					{{- if not (definedInList $.exclude_attributes $key) }}
					resource.TestCheckResourceAttr("data.aci_{{$.resourceName}}.test", "{{$key}}", "{{$value}}"),
						{{- end}}
					{{- end}}
					{{- end}}
				),
			},
			{
				Config:      testConfig{{.resourceClassName}}NotExisting,
				{{- if $found_cert }}
				Check: resource.ComposeAggregateTestCheckFunc(
					waitForApicBeforeRefresh,
				),
				{{- end}}
				ExpectError: regexp.MustCompile("Failed to read aci_{{$.resourceName}} data source"),
			},
		},
		{{- if $found_cert }}
		CheckDestroy: resource.ComposeAggregateTestCheckFunc(
			waitForApicBeforeRefresh,
		),
		{{- end}}
	})
}
{{- end}}

{{- if .parents}}
	{{- range .parents}}{{$target_classes := .target_classes}}
const testConfig{{$.resourceClassName}}DataSource{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}  = testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}  + `
data "aci_{{$.resourceName}}" "test" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  {{- range $key, $value := $.datasource_required}}
		{{- if eq $key "target_dn" }}
  {{$key}} = {{getTestTargetDn $.targets $.resourceName $value true $target_classes 0}}
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`

const testConfig{{$.resourceClassName}}NotExisting{{if .class_name}}{{capitalize .class_name}}{{end}}  = testConfig{{$.resourceClassName}}Min{{if .class_name}}DependencyWith{{capitalize .class_name}}{{end}}  + `
data "aci_{{$.resourceName}}" "test_non_existing" {
  {{- if ne .parent_dn ""}}
  parent_dn = {{.parent_dn}}
  {{- end}}
  {{- range $key, $value := $.datasource_non_existing}}
		{{- if eq $key "target_dn" }}
  {{$key}} = "{{getTestTargetDn $.targets $.resourceName $value false $target_classes 0}}_not_existing"
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`
	{{- end}}
{{- else}}
const testConfig{{.resourceClassName}}DataSource = testConfig{{.resourceClassName}}All + `
data "aci_{{$.resourceName}}" "test" {
  {{- range $key, $value := $.datasource_required}}
		{{- if eq $key "target_dn" }}
  {{$key}} = {{getTestTargetDn $.targets $.resourceName $value true nil 0}}
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`

const testConfig{{$.resourceClassName}}NotExisting = testConfig{{.resourceClassName}}All + `
data "aci_{{$.resourceName}}" "test" {
  {{- range $key, $value := $.datasource_non_existing}}
		{{- if eq $key "target_dn" }}
  {{$key}} = "{{getTestTargetDn $.targets $.resourceName $value false nil 0}}_not_existing"
		{{- else }}
  {{$key}} = "{{$value}}"
		{{- end }}
  {{- end}}
  depends_on = [aci_{{$.resourceName}}.test]
}
`
{{- end}}